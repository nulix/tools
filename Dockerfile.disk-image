###
### INSPIRED WITH:
###
# https://github.com/uptane/meta-updater/blob/master/classes/image_types_ota.bbclass

###
### HOW TO USE THIS FILE:
###
# docker build -f Dockerfile.disk-image . -o .

###
### STAGE 1 - build
###
FROM ubuntu AS build

# install build tools
RUN apt update && \
    apt install -y ostree libguestfs-tools linux-image-generic

# defaults
ARG MACHINE
ARG DISTRO_VERSION_MAJOR
ARG DISTRO_VERSION_MINOR
ARG DISTRO_VERSION_PATCH
ARG OSTREE_REPO
ARG OSTREE_MANIFEST
ARG OSTREE_BRANCHNAME="$DISTRO_VERSION_MAJOR/stable/$MACHINE"
ARG OTA_SYSROOT
ARG OSTREE_OSNAME
ARG BOOT_FILES_DEPLOY_ARCHIVE="boot-artifacts-*.tar.gz"
ARG BOOT_FILES_ARCHIVE="boot-artifacts.tar.gz"
ARG KERNEL_ARTIFACTS_DEPLOY_ARCHIVE="kernel-artifacts-*.tar.gz"
ARG KERNEL_ARTIFACTS_ARCHIVE="kernel-artifacts.tar.gz"
ARG ROOTFS_ARCHIVE="nulix-rootfs-*.tar.gz"
ARG IMAGE_FILE="nulix-os"

# copy dependencies
COPY ${OSTREE_REPO} /${OSTREE_REPO}/
COPY ${OSTREE_MANIFEST} /
COPY ${BOOT_FILES_DEPLOY_ARCHIVE} /${BOOT_FILES_ARCHIVE}
COPY ${KERNEL_ARTIFACTS_DEPLOY_ARCHIVE} /${KERNEL_ARTIFACTS_ARCHIVE}
COPY ${ROOTFS_ARCHIVE} /

# Init ostree sysroot files
RUN mkdir -p ${OTA_SYSROOT}
RUN ostree admin --sysroot=${OTA_SYSROOT} init-fs --modern ${OTA_SYSROOT} && \
    ostree admin --sysroot=${OTA_SYSROOT} os-init ${OSTREE_OSNAME}

# Preparation required to steer ostree bootloader detection
RUN mkdir -p ${OTA_SYSROOT}/boot/loader.0 && \
    ln -s loader.0 ${OTA_SYSROOT}/boot/loader && \
    touch ${OTA_SYSROOT}/boot/loader/uEnv.txt

# Apply generic configurations to the deployed repository; they are
# specified as a series of "key:value ..." pairs.
RUN for cfg in ${OSTREE_OTA_REPO_CONFIG}; do \
      ostree config --repo=${OTA_SYSROOT}/ostree/repo set \
           "$(echo "${cfg}" | cut -d ":" -f1)" \
           "$(echo "${cfg}" | cut -d ":" -f2-)"; \
    done

# Use OSTree hash to avoid any potential race conditions between
# multiple builds accessing the same ${OSTREE_REPO}.
RUN ostree_target_hash=$(cat ${OSTREE_MANIFEST}) && \
    ostree --repo=${OTA_SYSROOT}/ostree/repo pull-local --remote=${OSTREE_OSNAME} ${OSTREE_REPO} ${ostree_target_hash} && \
    kargs_list="" && \
    for arg in $(printf '%s' "${OSTREE_KERNEL_ARGS}"); do \
      kargs_list="${kargs_list} --karg-append=${arg}"; \
    done

# Create the same reference on the device we use in the archive OSTree
# repo in ${OSTREE_REPO}. This reference will show up when showing the
# deployment on the device:
# ostree admin status
# If a remote with the name ${OSTREE_OSNAME} is configured, this also
# will allow to use:
# ostree admin upgrade
RUN ostree_target_hash=$(cat ${OSTREE_MANIFEST}) && \
    ostree --repo=${OTA_SYSROOT}/ostree/repo refs --create=${OSTREE_OSNAME}:${OSTREE_BRANCHNAME} ${ostree_target_hash} && \
    ostree admin --sysroot=${OTA_SYSROOT} deploy ${kargs_list} --os=${OSTREE_OSNAME} ${OSTREE_OSNAME}:${OSTREE_BRANCHNAME}

RUN if [ "${OSTREE_SYSROOT_READONLY}" = "1" ]; then \
      ostree config --repo=${OTA_SYSROOT}/ostree/repo set sysroot.readonly true; \
    fi

# Create /var/sota if it doesn't exist yet
RUN mkdir -p ${OTA_SYSROOT}/ostree/deploy/${OSTREE_OSNAME}/var/sota
# Ensure the permissions are correctly set
RUN chmod 700 ${OTA_SYSROOT}/ostree/deploy/${OSTREE_OSNAME}/var/sota

RUN mkdir -p ${OTA_SYSROOT}/ostree/deploy/${OSTREE_OSNAME}/var/rootdirs

RUN mkdir -p ${OTA_SYSROOT}/ostree/deploy/${OSTREE_OSNAME}/var/cache

# Ensure that /var/local exists (AGL symlinks /usr/local to /var/local)
RUN install -d ${OTA_SYSROOT}/ostree/deploy/${OSTREE_OSNAME}/var/local

# Set package version for the first deployment
RUN ostree_target_hash=$(cat ${OSTREE_MANIFEST}) && \
    target_version=${ostree_target_hash} && \
    mkdir -p ${OTA_SYSROOT}/ostree/deploy/${OSTREE_OSNAME}/var/sota/import && \
	  echo "{\"${ostree_target_hash}\":\"${GARAGE_TARGET_NAME}-${target_version}\"}" \
      > ${OTA_SYSROOT}/ostree/deploy/${OSTREE_OSNAME}/var/sota/import/installed_versions

# blank image
RUN dd if=/dev/zero of=${IMAGE_FILE} bs=1M count=1024

# prepare partitions
RUN parted -s ${IMAGE_FILE} mklabel msdos \
      mkpart primary fat32 0% 100MiB \
      mkpart primary ext4 100MiB 100% \
      print

# prepare tar archives
RUN gzip -d ${BOOT_FILES_ARCHIVE} && \
    gzip -d ${KERNEL_ARTIFACTS_ARCHIVE} && \
    tar cf ${OTA_SYSROOT}.tar -C ${OTA_SYSROOT} .
ARG BOOT_FILES_ARCHIVE="${BOOT_FILES_ARCHIVE%.gz}"
ARG KERNEL_ARTIFACTS_ARCHIVE="${KERNEL_ARTIFACTS_ARCHIVE%.gz}"

# copy files to partitions
RUN guestfish -a ${IMAGE_FILE} <<EOF
      run
      mkfs vfat /dev/sda1 label:boot
      mkfs ext4 /dev/sda2 label:otaroot inode:4096
      mount /dev/sda1 /
      tar-in ${BOOT_FILES_ARCHIVE} /
      tar-in ${KERNEL_ARTIFACTS_ARCHIVE} /
      echo "=== boot partition ==="
      ls /
      umount /
      mount /dev/sda2 /
      tar-in ${OTA_SYSROOT}.tar /
      echo "=== otaroot partition ==="
      ls /
      umount /
      exit
EOF

# compress the image
RUN OS_VER=$DISTRO_VERSION_MAJOR.$DISTRO_VERSION_MINOR.$DISTRO_VERSION_PATCH && \
    mv ${IMAGE_FILE} ${IMAGE_FILE}-${OS_VER}.img && \
    IMAGE_FILE=${IMAGE_FILE}-${OS_VER}.img && \
    bzip2 ${IMAGE_FILE}

###
### STAGE 2 - export build artifacts
###
FROM scratch

ARG COMPRESSED_IMAGE_FILE="nulix-os-*.img.bz2"

COPY --from=build ${COMPRESSED_IMAGE_FILE} /

